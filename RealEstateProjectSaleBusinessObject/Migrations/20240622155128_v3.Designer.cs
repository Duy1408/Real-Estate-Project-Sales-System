// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateProjectSaleBusinessObject.BusinessObject;

#nullable disable

namespace RealEstateProjectSaleBusinessObject.Migrations
{
    [DbContext(typeof(RealEstateProjectSaleSystemDBContext))]
    [Migration("20240622155128_v3")]
    partial class v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", b =>
                {
                    b.Property<Guid>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("BookingFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Dateofsignature")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OpeningForSaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentProcessID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OpeningForSaleID");

                    b.HasIndex("PaymentProcessID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("StaffID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.BookingPayment", b =>
                {
                    b.Property<Guid>("BookingPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Deposittoholdproject")
                        .HasColumnType("int");

                    b.Property<Guid>("PaymentTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("BookingPaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("PaymentTypeID");

                    b.ToTable("BookingPayment", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.BookingPaymentProcessDetail", b =>
                {
                    b.Property<Guid>("BookingPaymentProcessDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Customervaluepaid")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Paymentduedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Paymentprogress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingPaymentProcessDetailID");

                    b.HasIndex("BookingID");

                    b.ToTable("BookingPaymentProcessDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertiesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PropertiesID");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Contract", b =>
                {
                    b.Property<Guid>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedStAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateUsAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractID");

                    b.HasIndex("BookingID");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Taxcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpenForSaleDetail", b =>
                {
                    b.Property<Guid>("OpenForSaleDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<Guid>("OpeningForSaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PropertiesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpenForSaleDetailID");

                    b.HasIndex("OpeningForSaleID");

                    b.HasIndex("PropertiesID");

                    b.ToTable("OpenForSaleDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", b =>
                {
                    b.Property<Guid>("OpeningForSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("DepositMoney")
                        .HasColumnType("float");

                    b.Property<DateTime>("Deposittime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoneyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("RevervationMoney")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("OpeningForSaleID");

                    b.ToTable("OpeningForSale", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", b =>
                {
                    b.Property<Guid>("PaymentProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentRate")
                        .HasColumnType("int");

                    b.Property<string>("Paymentperiod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentProcessID");

                    b.HasIndex("SalesPolicyID");

                    b.ToTable("PaymentProcess", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcessDetail", b =>
                {
                    b.Property<Guid>("PaymentProcessDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double?>("Maintenancecosts")
                        .HasColumnType("float");

                    b.Property<Guid>("PaymentProcessID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paymentprocessname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Period")
                        .HasColumnType("float");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentProcessDetailID");

                    b.HasIndex("PaymentProcessID");

                    b.ToTable("PaymentProcessDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentType", b =>
                {
                    b.Property<Guid>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("PaymentType", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Project", b =>
                {
                    b.Property<Guid>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampusArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommericalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LicenseNo")
                        .HasColumnType("int");

                    b.Property<string>("PlaceofIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("SalesPolicyID");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", b =>
                {
                    b.Property<Guid>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PromotionID");

                    b.HasIndex("SalesPolicyID");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PromotionDetail", b =>
                {
                    b.Property<Guid>("PromotionDetaiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<Guid>("PromotionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PromotionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertiesTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromotionDetaiID");

                    b.HasIndex("PromotionID");

                    b.HasIndex("PropertiesTypeID");

                    b.ToTable("PromotionDetail", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Property", b =>
                {
                    b.Property<Guid>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BathRoom")
                        .HasColumnType("int");

                    b.Property<int>("BedRoom")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LivingRoom")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertiesTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SizeArea")
                        .HasColumnType("float");

                    b.Property<string>("View")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PropertyTypeID");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", b =>
                {
                    b.Property<Guid>("PropertyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyTypeID");

                    b.ToTable("PropertiesType", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", b =>
                {
                    b.Property<Guid>("SalesPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpressTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeopleApplied")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPolicyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SalesPolicyID");

                    b.ToTable("Salespolicy", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", b =>
                {
                    b.Property<Guid>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRange")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagesignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfresidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeoforigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Taxcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffID");

                    b.HasIndex("AccountID");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Account", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", "OpeningForSale")
                        .WithMany("Bookings")
                        .HasForeignKey("OpeningForSaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", "PaymentProcess")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("Bookings")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", "Staff")
                        .WithMany("Bookings")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OpeningForSale");

                    b.Navigation("PaymentProcess");

                    b.Navigation("Project");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.BookingPayment", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany("BookingPayments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentType", "PaymentType")
                        .WithMany("BookingPayments")
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.BookingPaymentProcessDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany("BookingPaymentProcessDetails")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Comment", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Property", "Properties")
                        .WithMany("Comments")
                        .HasForeignKey("PropertiesID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Contract", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpenForSaleDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", "OpeningForSale")
                        .WithMany("openForSaleDetails")
                        .HasForeignKey("OpeningForSaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Property", "Properties")
                        .WithMany("openForSaleDetails")
                        .HasForeignKey("PropertiesID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OpeningForSale");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", "Salespolicy")
                        .WithMany("PaymentProcesses")
                        .HasForeignKey("SalesPolicyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salespolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcessDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", "PaymentProcess")
                        .WithMany("PaymentProcessDetails")
                        .HasForeignKey("PaymentProcessID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PaymentProcess");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Project", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", "Salespolicy")
                        .WithMany("Projects")
                        .HasForeignKey("SalesPolicyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salespolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", "Salespolicy")
                        .WithMany("Promotions")
                        .HasForeignKey("SalesPolicyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salespolicy");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PromotionDetail", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", "Promotion")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", "PropertiesType")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PropertiesTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("PropertiesType");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Property", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Project", "Project")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Project");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", b =>
                {
                    b.HasOne("RealEstateProjectSaleBusinessObject.BusinessObject.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Booking", b =>
                {
                    b.Navigation("BookingPaymentProcessDetails");

                    b.Navigation("BookingPayments");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.OpeningForSale", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("openForSaleDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentProcess", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PaymentProcessDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PaymentType", b =>
                {
                    b.Navigation("BookingPayments");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Project", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Promotion", b =>
                {
                    b.Navigation("PromotionDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Property", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("openForSaleDetails");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.PropertyType", b =>
                {
                    b.Navigation("PromotionDetails");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Salespolicy", b =>
                {
                    b.Navigation("PaymentProcesses");

                    b.Navigation("Projects");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("RealEstateProjectSaleBusinessObject.BusinessObject.Staff", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
